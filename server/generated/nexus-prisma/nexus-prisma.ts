/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Role: RoleObject
      Group: GroupObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      RoleConnection: RoleConnectionObject
      RoleEdge: RoleEdgeObject
      AggregateRole: AggregateRoleObject
      GroupConnection: GroupConnectionObject
      GroupEdge: GroupEdgeObject
      AggregateGroup: AggregateGroupObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      RoleSubscriptionPayload: RoleSubscriptionPayloadObject
      RolePreviousValues: RolePreviousValuesObject
      GroupSubscriptionPayload: GroupSubscriptionPayloadObject
      GroupPreviousValues: GroupPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Role: RoleFieldDetails
      Group: GroupFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      RoleConnection: RoleConnectionFieldDetails
      RoleEdge: RoleEdgeFieldDetails
      AggregateRole: AggregateRoleFieldDetails
      GroupConnection: GroupConnectionFieldDetails
      GroupEdge: GroupEdgeFieldDetails
      AggregateGroup: AggregateGroupFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      RoleSubscriptionPayload: RoleSubscriptionPayloadFieldDetails
      RolePreviousValues: RolePreviousValuesFieldDetails
      GroupSubscriptionPayload: GroupSubscriptionPayloadFieldDetails
      GroupPreviousValues: GroupPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      RoleWhereInput: RoleWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      GroupWhereInput: GroupWhereInputInputObject
      RoleWhereUniqueInput: RoleWhereUniqueInputInputObject
      GroupWhereUniqueInput: GroupWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      RoleCreateManyWithoutUsersInput: RoleCreateManyWithoutUsersInputInputObject
      RoleCreateWithoutUsersInput: RoleCreateWithoutUsersInputInputObject
      GroupCreateManyWithoutUsersInput: GroupCreateManyWithoutUsersInputInputObject
      GroupCreateWithoutUsersInput: GroupCreateWithoutUsersInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      RoleUpdateManyWithoutUsersInput: RoleUpdateManyWithoutUsersInputInputObject
      RoleUpdateWithWhereUniqueWithoutUsersInput: RoleUpdateWithWhereUniqueWithoutUsersInputInputObject
      RoleUpdateWithoutUsersDataInput: RoleUpdateWithoutUsersDataInputInputObject
      RoleUpsertWithWhereUniqueWithoutUsersInput: RoleUpsertWithWhereUniqueWithoutUsersInputInputObject
      RoleScalarWhereInput: RoleScalarWhereInputInputObject
      RoleUpdateManyWithWhereNestedInput: RoleUpdateManyWithWhereNestedInputInputObject
      RoleUpdateManyDataInput: RoleUpdateManyDataInputInputObject
      GroupUpdateManyWithoutUsersInput: GroupUpdateManyWithoutUsersInputInputObject
      GroupUpdateWithWhereUniqueWithoutUsersInput: GroupUpdateWithWhereUniqueWithoutUsersInputInputObject
      GroupUpdateWithoutUsersDataInput: GroupUpdateWithoutUsersDataInputInputObject
      GroupUpsertWithWhereUniqueWithoutUsersInput: GroupUpsertWithWhereUniqueWithoutUsersInputInputObject
      GroupScalarWhereInput: GroupScalarWhereInputInputObject
      GroupUpdateManyWithWhereNestedInput: GroupUpdateManyWithWhereNestedInputInputObject
      GroupUpdateManyDataInput: GroupUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      RoleCreateInput: RoleCreateInputInputObject
      UserCreateManyWithoutRolesInput: UserCreateManyWithoutRolesInputInputObject
      UserCreateWithoutRolesInput: UserCreateWithoutRolesInputInputObject
      RoleUpdateInput: RoleUpdateInputInputObject
      UserUpdateManyWithoutRolesInput: UserUpdateManyWithoutRolesInputInputObject
      UserUpdateWithWhereUniqueWithoutRolesInput: UserUpdateWithWhereUniqueWithoutRolesInputInputObject
      UserUpdateWithoutRolesDataInput: UserUpdateWithoutRolesDataInputInputObject
      UserUpsertWithWhereUniqueWithoutRolesInput: UserUpsertWithWhereUniqueWithoutRolesInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      RoleUpdateManyMutationInput: RoleUpdateManyMutationInputInputObject
      GroupCreateInput: GroupCreateInputInputObject
      UserCreateManyWithoutGroupsInput: UserCreateManyWithoutGroupsInputInputObject
      UserCreateWithoutGroupsInput: UserCreateWithoutGroupsInputInputObject
      GroupUpdateInput: GroupUpdateInputInputObject
      UserUpdateManyWithoutGroupsInput: UserUpdateManyWithoutGroupsInputInputObject
      UserUpdateWithWhereUniqueWithoutGroupsInput: UserUpdateWithWhereUniqueWithoutGroupsInputInputObject
      UserUpdateWithoutGroupsDataInput: UserUpdateWithoutGroupsDataInputInputObject
      UserUpsertWithWhereUniqueWithoutGroupsInput: UserUpsertWithWhereUniqueWithoutGroupsInputInputObject
      GroupUpdateManyMutationInput: GroupUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      RoleSubscriptionWhereInput: RoleSubscriptionWhereInputInputObject
      GroupSubscriptionWhereInput: GroupSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    RoleOrderByInput: RoleOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    GroupOrderByInput: GroupOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'role', args?: QueryRoleArgs[] | false, alias?: string  } 
  | { name: 'roles', args?: QueryRolesArgs[] | false, alias?: string  } 
  | { name: 'rolesConnection', args?: QueryRolesConnectionArgs[] | false, alias?: string  } 
  | { name: 'group', args?: QueryGroupArgs[] | false, alias?: string  } 
  | { name: 'groups', args?: QueryGroupsArgs[] | false, alias?: string  } 
  | { name: 'groupsConnection', args?: QueryGroupsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'role'
  | 'roles'
  | 'rolesConnection'
  | 'group'
  | 'groups'
  | 'groupsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRoleArgs =
  | 'where'
type QueryRolesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRolesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGroupArgs =
  | 'where'
type QueryGroupsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGroupsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  role: {
    type: 'Role'
    args: Record<QueryRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  roles: {
    type: 'Role'
    args: Record<QueryRolesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RoleWhereInput | null, orderBy?: prisma.RoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role[]> | prisma.Role[]
  }
  rolesConnection: {
    type: 'RoleConnection'
    args: Record<QueryRolesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RoleWhereInput | null, orderBy?: prisma.RoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoleConnection> | prisma.RoleConnection
  }
  group: {
    type: 'Group'
    args: Record<QueryGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GroupWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group | null> | prisma.Group | null
  }
  groups: {
    type: 'Group'
    args: Record<QueryGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GroupWhereInput | null, orderBy?: prisma.GroupOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group[]> | prisma.Group[]
  }
  groupsConnection: {
    type: 'GroupConnection'
    args: Record<QueryGroupsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GroupWhereInput | null, orderBy?: prisma.GroupOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GroupConnection> | prisma.GroupConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'deviceToken', args?: [] | false, alias?: string  } 
  | { name: 'contactNumber', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'roles', args?: UserRolesArgs[] | false, alias?: string  } 
  | { name: 'groups', args?: UserGroupsArgs[] | false, alias?: string  } 
  | { name: 'blocked', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'deviceToken'
  | 'contactNumber'
  | 'password'
  | 'roles'
  | 'groups'
  | 'blocked'


type UserRolesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserGroupsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deviceToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  contactNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  roles: {
    type: 'Role'
    args: Record<UserRolesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: RoleWhereInput | null, orderBy?: prisma.RoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role[]> | prisma.Role[]
  }
  groups: {
    type: 'Group'
    args: Record<UserGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: GroupWhereInput | null, orderBy?: prisma.GroupOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group[]> | prisma.Group[]
  }
  blocked: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Role

type RoleObject =
  | RoleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: RoleUsersArgs[] | false, alias?: string  } 

type RoleFields =
  | 'id'
  | 'name'
  | 'users'


type RoleUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RoleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<RoleUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Role">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for Group

type GroupObject =
  | GroupFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: GroupUsersArgs[] | false, alias?: string  } 

type GroupFields =
  | 'id'
  | 'name'
  | 'users'


type GroupUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GroupFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<GroupUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Group">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RoleConnection

type RoleConnectionObject =
  | RoleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RoleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RoleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RoleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoleEdge[]> | prisma.RoleEdge[]
  }
  aggregate: {
    type: 'AggregateRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRole> | prisma.AggregateRole
  }
}
  

// Types for RoleEdge

type RoleEdgeObject =
  | RoleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RoleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RoleEdgeFieldDetails {
  node: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRole

type AggregateRoleObject =
  | AggregateRoleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRoleFields =
  | 'count'



  

export interface AggregateRoleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GroupConnection

type GroupConnectionObject =
  | GroupConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GroupConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GroupConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GroupConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GroupEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GroupConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GroupEdge[]> | prisma.GroupEdge[]
  }
  aggregate: {
    type: 'AggregateGroup'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GroupConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGroup> | prisma.AggregateGroup
  }
}
  

// Types for GroupEdge

type GroupEdgeObject =
  | GroupEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GroupEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GroupEdgeFieldDetails {
  node: {
    type: 'Group'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GroupEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group> | prisma.Group
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGroup

type AggregateGroupObject =
  | AggregateGroupFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGroupFields =
  | 'count'



  

export interface AggregateGroupFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createRole', args?: MutationCreateRoleArgs[] | false, alias?: string  } 
  | { name: 'updateRole', args?: MutationUpdateRoleArgs[] | false, alias?: string  } 
  | { name: 'updateManyRoles', args?: MutationUpdateManyRolesArgs[] | false, alias?: string  } 
  | { name: 'upsertRole', args?: MutationUpsertRoleArgs[] | false, alias?: string  } 
  | { name: 'deleteRole', args?: MutationDeleteRoleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRoles', args?: MutationDeleteManyRolesArgs[] | false, alias?: string  } 
  | { name: 'createGroup', args?: MutationCreateGroupArgs[] | false, alias?: string  } 
  | { name: 'updateGroup', args?: MutationUpdateGroupArgs[] | false, alias?: string  } 
  | { name: 'updateManyGroups', args?: MutationUpdateManyGroupsArgs[] | false, alias?: string  } 
  | { name: 'upsertGroup', args?: MutationUpsertGroupArgs[] | false, alias?: string  } 
  | { name: 'deleteGroup', args?: MutationDeleteGroupArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGroups', args?: MutationDeleteManyGroupsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createRole'
  | 'updateRole'
  | 'updateManyRoles'
  | 'upsertRole'
  | 'deleteRole'
  | 'deleteManyRoles'
  | 'createGroup'
  | 'updateGroup'
  | 'updateManyGroups'
  | 'upsertGroup'
  | 'deleteGroup'
  | 'deleteManyGroups'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateRoleArgs =
  | 'data'
type MutationUpdateRoleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRolesArgs =
  | 'data'
  | 'where'
type MutationUpsertRoleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRoleArgs =
  | 'where'
type MutationDeleteManyRolesArgs =
  | 'where'
type MutationCreateGroupArgs =
  | 'data'
type MutationUpdateGroupArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGroupsArgs =
  | 'data'
  | 'where'
type MutationUpsertGroupArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGroupArgs =
  | 'where'
type MutationDeleteManyGroupsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRole: {
    type: 'Role'
    args: Record<MutationCreateRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  updateRole: {
    type: 'Role'
    args: Record<MutationUpdateRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoleUpdateInput, where: RoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  updateManyRoles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoleUpdateManyMutationInput, where?: RoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRole: {
    type: 'Role'
    args: Record<MutationUpsertRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RoleWhereUniqueInput, create: RoleCreateInput, update: RoleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  deleteRole: {
    type: 'Role'
    args: Record<MutationDeleteRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  deleteManyRoles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGroup: {
    type: 'Group'
    args: Record<MutationCreateGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GroupCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group> | prisma.Group
  }
  updateGroup: {
    type: 'Group'
    args: Record<MutationUpdateGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GroupUpdateInput, where: GroupWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group | null> | prisma.Group | null
  }
  updateManyGroups: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GroupUpdateManyMutationInput, where?: GroupWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGroup: {
    type: 'Group'
    args: Record<MutationUpsertGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GroupWhereUniqueInput, create: GroupCreateInput, update: GroupUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group> | prisma.Group
  }
  deleteGroup: {
    type: 'Group'
    args: Record<MutationDeleteGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GroupWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group | null> | prisma.Group | null
  }
  deleteManyGroups: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GroupWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'role', args?: SubscriptionRoleArgs[] | false, alias?: string  } 
  | { name: 'group', args?: SubscriptionGroupArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'role'
  | 'group'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionRoleArgs =
  | 'where'
type SubscriptionGroupArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  role: {
    type: 'RoleSubscriptionPayload'
    args: Record<SubscriptionRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RoleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoleSubscriptionPayload | null> | prisma.RoleSubscriptionPayload | null
  }
  group: {
    type: 'GroupSubscriptionPayload'
    args: Record<SubscriptionGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GroupSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GroupSubscriptionPayload | null> | prisma.GroupSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'deviceToken', args?: [] | false, alias?: string  } 
  | { name: 'contactNumber', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'blocked', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'
  | 'deviceToken'
  | 'contactNumber'
  | 'password'
  | 'blocked'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deviceToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  contactNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  blocked: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RoleSubscriptionPayload

type RoleSubscriptionPayloadObject =
  | RoleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RoleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RoleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RolePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RolePreviousValues | null> | prisma.RolePreviousValues | null
  }
}
  

// Types for RolePreviousValues

type RolePreviousValuesObject =
  | RolePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type RolePreviousValuesFields =
  | 'id'
  | 'name'



  

export interface RolePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GroupSubscriptionPayload

type GroupSubscriptionPayloadObject =
  | GroupSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GroupSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GroupSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GroupSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Group'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GroupSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Group | null> | prisma.Group | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GroupPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GroupSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GroupPreviousValues | null> | prisma.GroupPreviousValues | null
  }
}
  

// Types for GroupPreviousValues

type GroupPreviousValuesObject =
  | GroupPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type GroupPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface GroupPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface RoleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: RoleWhereInput[]
  OR?: RoleWhereInput[]
  NOT?: RoleWhereInput[]
}
export type RoleWhereInputInputObject =
  | Extract<keyof RoleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  deviceToken?: string | null
  deviceToken_not?: string | null
  deviceToken_in?: string[]
  deviceToken_not_in?: string[]
  deviceToken_lt?: string | null
  deviceToken_lte?: string | null
  deviceToken_gt?: string | null
  deviceToken_gte?: string | null
  deviceToken_contains?: string | null
  deviceToken_not_contains?: string | null
  deviceToken_starts_with?: string | null
  deviceToken_not_starts_with?: string | null
  deviceToken_ends_with?: string | null
  deviceToken_not_ends_with?: string | null
  contactNumber?: string | null
  contactNumber_not?: string | null
  contactNumber_in?: string[]
  contactNumber_not_in?: string[]
  contactNumber_lt?: string | null
  contactNumber_lte?: string | null
  contactNumber_gt?: string | null
  contactNumber_gte?: string | null
  contactNumber_contains?: string | null
  contactNumber_not_contains?: string | null
  contactNumber_starts_with?: string | null
  contactNumber_not_starts_with?: string | null
  contactNumber_ends_with?: string | null
  contactNumber_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  roles_every?: RoleWhereInput | null
  roles_some?: RoleWhereInput | null
  roles_none?: RoleWhereInput | null
  groups_every?: GroupWhereInput | null
  groups_some?: GroupWhereInput | null
  groups_none?: GroupWhereInput | null
  blocked?: boolean | null
  blocked_not?: boolean | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'deviceToken_not', alias?: string  } 
  | { name: 'deviceToken_in', alias?: string  } 
  | { name: 'deviceToken_not_in', alias?: string  } 
  | { name: 'deviceToken_lt', alias?: string  } 
  | { name: 'deviceToken_lte', alias?: string  } 
  | { name: 'deviceToken_gt', alias?: string  } 
  | { name: 'deviceToken_gte', alias?: string  } 
  | { name: 'deviceToken_contains', alias?: string  } 
  | { name: 'deviceToken_not_contains', alias?: string  } 
  | { name: 'deviceToken_starts_with', alias?: string  } 
  | { name: 'deviceToken_not_starts_with', alias?: string  } 
  | { name: 'deviceToken_ends_with', alias?: string  } 
  | { name: 'deviceToken_not_ends_with', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'contactNumber_not', alias?: string  } 
  | { name: 'contactNumber_in', alias?: string  } 
  | { name: 'contactNumber_not_in', alias?: string  } 
  | { name: 'contactNumber_lt', alias?: string  } 
  | { name: 'contactNumber_lte', alias?: string  } 
  | { name: 'contactNumber_gt', alias?: string  } 
  | { name: 'contactNumber_gte', alias?: string  } 
  | { name: 'contactNumber_contains', alias?: string  } 
  | { name: 'contactNumber_not_contains', alias?: string  } 
  | { name: 'contactNumber_starts_with', alias?: string  } 
  | { name: 'contactNumber_not_starts_with', alias?: string  } 
  | { name: 'contactNumber_ends_with', alias?: string  } 
  | { name: 'contactNumber_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'roles_every', alias?: string  } 
  | { name: 'roles_some', alias?: string  } 
  | { name: 'roles_none', alias?: string  } 
  | { name: 'groups_every', alias?: string  } 
  | { name: 'groups_some', alias?: string  } 
  | { name: 'groups_none', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  | { name: 'blocked_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GroupWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: GroupWhereInput[]
  OR?: GroupWhereInput[]
  NOT?: GroupWhereInput[]
}
export type GroupWhereInputInputObject =
  | Extract<keyof GroupWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoleWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type RoleWhereUniqueInputInputObject =
  | Extract<keyof RoleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface GroupWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type GroupWhereUniqueInputInputObject =
  | Extract<keyof GroupWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  name?: string
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string
  roles?: RoleCreateManyWithoutUsersInput | null
  groups?: GroupCreateManyWithoutUsersInput | null
  blocked?: boolean
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'roles', alias?: string  } 
  | { name: 'groups', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface RoleCreateManyWithoutUsersInput {
  create?: RoleCreateWithoutUsersInput[]
  connect?: RoleWhereUniqueInput[]
}
export type RoleCreateManyWithoutUsersInputInputObject =
  | Extract<keyof RoleCreateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RoleCreateWithoutUsersInput {
  id?: string | null
  name?: string
}
export type RoleCreateWithoutUsersInputInputObject =
  | Extract<keyof RoleCreateWithoutUsersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface GroupCreateManyWithoutUsersInput {
  create?: GroupCreateWithoutUsersInput[]
  connect?: GroupWhereUniqueInput[]
}
export type GroupCreateManyWithoutUsersInputInputObject =
  | Extract<keyof GroupCreateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GroupCreateWithoutUsersInput {
  id?: string | null
  name?: string
}
export type GroupCreateWithoutUsersInputInputObject =
  | Extract<keyof GroupCreateWithoutUsersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string | null
  roles?: RoleUpdateManyWithoutUsersInput | null
  groups?: GroupUpdateManyWithoutUsersInput | null
  blocked?: boolean | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'roles', alias?: string  } 
  | { name: 'groups', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface RoleUpdateManyWithoutUsersInput {
  create?: RoleCreateWithoutUsersInput[]
  delete?: RoleWhereUniqueInput[]
  connect?: RoleWhereUniqueInput[]
  set?: RoleWhereUniqueInput[]
  disconnect?: RoleWhereUniqueInput[]
  update?: RoleUpdateWithWhereUniqueWithoutUsersInput[]
  upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput[]
  deleteMany?: RoleScalarWhereInput[]
  updateMany?: RoleUpdateManyWithWhereNestedInput[]
}
export type RoleUpdateManyWithoutUsersInputInputObject =
  | Extract<keyof RoleUpdateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface RoleUpdateWithWhereUniqueWithoutUsersInput {
  where?: RoleWhereUniqueInput
  data?: RoleUpdateWithoutUsersDataInput
}
export type RoleUpdateWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof RoleUpdateWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RoleUpdateWithoutUsersDataInput {
  name?: string | null
}
export type RoleUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof RoleUpdateWithoutUsersDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface RoleUpsertWithWhereUniqueWithoutUsersInput {
  where?: RoleWhereUniqueInput
  update?: RoleUpdateWithoutUsersDataInput
  create?: RoleCreateWithoutUsersInput
}
export type RoleUpsertWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof RoleUpsertWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface RoleScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: RoleScalarWhereInput[]
  OR?: RoleScalarWhereInput[]
  NOT?: RoleScalarWhereInput[]
}
export type RoleScalarWhereInputInputObject =
  | Extract<keyof RoleScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoleUpdateManyWithWhereNestedInput {
  where?: RoleScalarWhereInput
  data?: RoleUpdateManyDataInput
}
export type RoleUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof RoleUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RoleUpdateManyDataInput {
  name?: string | null
}
export type RoleUpdateManyDataInputInputObject =
  | Extract<keyof RoleUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface GroupUpdateManyWithoutUsersInput {
  create?: GroupCreateWithoutUsersInput[]
  delete?: GroupWhereUniqueInput[]
  connect?: GroupWhereUniqueInput[]
  set?: GroupWhereUniqueInput[]
  disconnect?: GroupWhereUniqueInput[]
  update?: GroupUpdateWithWhereUniqueWithoutUsersInput[]
  upsert?: GroupUpsertWithWhereUniqueWithoutUsersInput[]
  deleteMany?: GroupScalarWhereInput[]
  updateMany?: GroupUpdateManyWithWhereNestedInput[]
}
export type GroupUpdateManyWithoutUsersInputInputObject =
  | Extract<keyof GroupUpdateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GroupUpdateWithWhereUniqueWithoutUsersInput {
  where?: GroupWhereUniqueInput
  data?: GroupUpdateWithoutUsersDataInput
}
export type GroupUpdateWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof GroupUpdateWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GroupUpdateWithoutUsersDataInput {
  name?: string | null
}
export type GroupUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof GroupUpdateWithoutUsersDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface GroupUpsertWithWhereUniqueWithoutUsersInput {
  where?: GroupWhereUniqueInput
  update?: GroupUpdateWithoutUsersDataInput
  create?: GroupCreateWithoutUsersInput
}
export type GroupUpsertWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof GroupUpsertWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GroupScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: GroupScalarWhereInput[]
  OR?: GroupScalarWhereInput[]
  NOT?: GroupScalarWhereInput[]
}
export type GroupScalarWhereInputInputObject =
  | Extract<keyof GroupScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GroupUpdateManyWithWhereNestedInput {
  where?: GroupScalarWhereInput
  data?: GroupUpdateManyDataInput
}
export type GroupUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GroupUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GroupUpdateManyDataInput {
  name?: string | null
}
export type GroupUpdateManyDataInputInputObject =
  | Extract<keyof GroupUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string | null
  blocked?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface RoleCreateInput {
  id?: string | null
  name?: string
  users?: UserCreateManyWithoutRolesInput | null
}
export type RoleCreateInputInputObject =
  | Extract<keyof RoleCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutRolesInput {
  create?: UserCreateWithoutRolesInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutRolesInputInputObject =
  | Extract<keyof UserCreateManyWithoutRolesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutRolesInput {
  id?: string | null
  email?: string
  name?: string
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string
  groups?: GroupCreateManyWithoutUsersInput | null
  blocked?: boolean
}
export type UserCreateWithoutRolesInputInputObject =
  | Extract<keyof UserCreateWithoutRolesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'groups', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface RoleUpdateInput {
  name?: string | null
  users?: UserUpdateManyWithoutRolesInput | null
}
export type RoleUpdateInputInputObject =
  | Extract<keyof RoleUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutRolesInput {
  create?: UserCreateWithoutRolesInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutRolesInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutRolesInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutRolesInputInputObject =
  | Extract<keyof UserUpdateManyWithoutRolesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutRolesInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutRolesDataInput
}
export type UserUpdateWithWhereUniqueWithoutRolesInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutRolesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutRolesDataInput {
  email?: string | null
  name?: string | null
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string | null
  groups?: GroupUpdateManyWithoutUsersInput | null
  blocked?: boolean | null
}
export type UserUpdateWithoutRolesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutRolesDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'groups', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutRolesInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutRolesDataInput
  create?: UserCreateWithoutRolesInput
}
export type UserUpsertWithWhereUniqueWithoutRolesInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutRolesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  deviceToken?: string | null
  deviceToken_not?: string | null
  deviceToken_in?: string[]
  deviceToken_not_in?: string[]
  deviceToken_lt?: string | null
  deviceToken_lte?: string | null
  deviceToken_gt?: string | null
  deviceToken_gte?: string | null
  deviceToken_contains?: string | null
  deviceToken_not_contains?: string | null
  deviceToken_starts_with?: string | null
  deviceToken_not_starts_with?: string | null
  deviceToken_ends_with?: string | null
  deviceToken_not_ends_with?: string | null
  contactNumber?: string | null
  contactNumber_not?: string | null
  contactNumber_in?: string[]
  contactNumber_not_in?: string[]
  contactNumber_lt?: string | null
  contactNumber_lte?: string | null
  contactNumber_gt?: string | null
  contactNumber_gte?: string | null
  contactNumber_contains?: string | null
  contactNumber_not_contains?: string | null
  contactNumber_starts_with?: string | null
  contactNumber_not_starts_with?: string | null
  contactNumber_ends_with?: string | null
  contactNumber_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  blocked?: boolean | null
  blocked_not?: boolean | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'deviceToken_not', alias?: string  } 
  | { name: 'deviceToken_in', alias?: string  } 
  | { name: 'deviceToken_not_in', alias?: string  } 
  | { name: 'deviceToken_lt', alias?: string  } 
  | { name: 'deviceToken_lte', alias?: string  } 
  | { name: 'deviceToken_gt', alias?: string  } 
  | { name: 'deviceToken_gte', alias?: string  } 
  | { name: 'deviceToken_contains', alias?: string  } 
  | { name: 'deviceToken_not_contains', alias?: string  } 
  | { name: 'deviceToken_starts_with', alias?: string  } 
  | { name: 'deviceToken_not_starts_with', alias?: string  } 
  | { name: 'deviceToken_ends_with', alias?: string  } 
  | { name: 'deviceToken_not_ends_with', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'contactNumber_not', alias?: string  } 
  | { name: 'contactNumber_in', alias?: string  } 
  | { name: 'contactNumber_not_in', alias?: string  } 
  | { name: 'contactNumber_lt', alias?: string  } 
  | { name: 'contactNumber_lte', alias?: string  } 
  | { name: 'contactNumber_gt', alias?: string  } 
  | { name: 'contactNumber_gte', alias?: string  } 
  | { name: 'contactNumber_contains', alias?: string  } 
  | { name: 'contactNumber_not_contains', alias?: string  } 
  | { name: 'contactNumber_starts_with', alias?: string  } 
  | { name: 'contactNumber_not_starts_with', alias?: string  } 
  | { name: 'contactNumber_ends_with', alias?: string  } 
  | { name: 'contactNumber_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  | { name: 'blocked_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  email?: string | null
  name?: string | null
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string | null
  blocked?: boolean | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface RoleUpdateManyMutationInput {
  name?: string | null
}
export type RoleUpdateManyMutationInputInputObject =
  | Extract<keyof RoleUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface GroupCreateInput {
  id?: string | null
  name?: string
  users?: UserCreateManyWithoutGroupsInput | null
}
export type GroupCreateInputInputObject =
  | Extract<keyof GroupCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutGroupsInput {
  create?: UserCreateWithoutGroupsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutGroupsInputInputObject =
  | Extract<keyof UserCreateManyWithoutGroupsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutGroupsInput {
  id?: string | null
  email?: string
  name?: string
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string
  roles?: RoleCreateManyWithoutUsersInput | null
  blocked?: boolean
}
export type UserCreateWithoutGroupsInputInputObject =
  | Extract<keyof UserCreateWithoutGroupsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'roles', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface GroupUpdateInput {
  name?: string | null
  users?: UserUpdateManyWithoutGroupsInput | null
}
export type GroupUpdateInputInputObject =
  | Extract<keyof GroupUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutGroupsInput {
  create?: UserCreateWithoutGroupsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutGroupsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutGroupsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutGroupsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutGroupsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutGroupsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutGroupsDataInput
}
export type UserUpdateWithWhereUniqueWithoutGroupsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutGroupsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutGroupsDataInput {
  email?: string | null
  name?: string | null
  deviceToken?: string | null
  contactNumber?: string | null
  password?: string | null
  roles?: RoleUpdateManyWithoutUsersInput | null
  blocked?: boolean | null
}
export type UserUpdateWithoutGroupsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutGroupsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'deviceToken', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'roles', alias?: string  } 
  | { name: 'blocked', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutGroupsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutGroupsDataInput
  create?: UserCreateWithoutGroupsInput
}
export type UserUpsertWithWhereUniqueWithoutGroupsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutGroupsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GroupUpdateManyMutationInput {
  name?: string | null
}
export type GroupUpdateManyMutationInputInputObject =
  | Extract<keyof GroupUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RoleWhereInput | null
  AND?: RoleSubscriptionWhereInput[]
  OR?: RoleSubscriptionWhereInput[]
  NOT?: RoleSubscriptionWhereInput[]
}
export type RoleSubscriptionWhereInputInputObject =
  | Extract<keyof RoleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GroupSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GroupWhereInput | null
  AND?: GroupSubscriptionWhereInput[]
  OR?: GroupSubscriptionWhereInput[]
  NOT?: GroupSubscriptionWhereInput[]
}
export type GroupSubscriptionWhereInputInputObject =
  | Extract<keyof GroupSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RoleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'deviceToken_ASC'
  | 'deviceToken_DESC'
  | 'contactNumber_ASC'
  | 'contactNumber_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'blocked_ASC'
  | 'blocked_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GroupOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  